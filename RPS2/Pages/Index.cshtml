@page
@model IndexModel

<main>
    <!-- homepage (matchmaking) -->
    <section id="matchmaking" class="center" style="">
        <section style="text-align: center; padding:1px">
            <img src="images/Logo.svg" class="mb-5 logo" />
        </section>
        <section style="text-align:center; padding:1px" class="mt-5">
            <div class="d-flex justify-content-center mb-4">
                <input type="text" class="form-control shadow-none" placeholder="Enter your name" maxlength="30">
            </div>
            <div class="d-flex justify-content-center">
                <input id="friendIdInput" type="text" class="form-control shadow-none" placeholder="Enter your friend's code*" maxlength="8">
            </div>
            <div class="d-flex justify-content-center mb-5">
                <label class="note">*optional: leave blank for automatic matchmaking</label>
            </div>
            <a id="findGameBtn" class="btn btn-primary mt-5">Find game &raquo;</a>
            <a id="fightAIBtn" class="btn btn-primary mt-5">VS AI</a>

            <div class="d-flex justify-content-end me-5">
                <div style="flex-direction: column; display:flex">
                    <img src="images/play_with_friend.svg" class="play-friends" />
                    <div>
                        <a id="GUID" class="btn btn-primary mt-3">
                            <span id="GUID-TEXT">
                            </span>
                            <img src="images/copy_icon.svg" class="ms-3" style="text-align:right; height:2rem; width: auto" />
                        </a>
                    </div>
                </div>
            </div>
        </section>
    </section>

    <!-- searching -->
    <section id="searching" class="center" style="display:none">
        <section style="text-align: center; padding:1px">
            <img src="images/Logo.svg" class="logo" />
        </section>
        <section style="text-align:center; padding:1px" class="mt-5 mb-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </section>
        <section style="text-align: center; padding:1px">
            <label id="waitingQuip" class="waiting-text"></label>
        </section>
        <section id="searchingCodeButton" style="text-align: center; padding:1px">
            <a id="GUID-2" class="btn btn-primary mt-5">
                <span id="GUID-TEXT-2">
                    asdfasdf
                </span>
                <img src="images/copy_icon.svg" class="ms-3" style="text-align:right; height:2rem; width: auto" />
            </a>
        </section>
        <section id="searchingCodeLabel" style="text-align: center; padding:1px">
            <label class="friend-note">Still waiting? Share your code again!</label>
        </section>
    </section>

    <!-- results -->
    <section id="results" class="center" style="display:none">
        <section style="text-align: center; padding:1px">
            <img src="images/Logo.svg" class="logo" />
        </section>
        <section style="text-align: center; padding:1px">
            <label id="resultsText" class="results-text"> You win! </label>
        </section>
        <section style="text-align: center; padding:1px">
            <a id="playAgainBtn" class="btn btn-primary mt-5">Play again</a>
        </section>
        <section style="text-align: center; padding:1px">
            <a href="https://store.steampowered.com/app/3107360/Grooveyard/" rel="noopener noreferrer" target="_blank" class="btn btn-primary mt-1">Check out Grooveyard on Steam</a>
        </section>
        <section style="text-align: center; padding:1px">
            <a href="https://store.steampowered.com/app/2217000/Rivals_of_Aether_II/" rel="noopener noreferrer" target="_blank" class="btn btn-primary mt-1">Check out Rivals of Aether II on Steam</a>
        </section>
    </section>

    <!-- gameplay -->
    <section id="game" style="display:none">
        <div class="container">
            <div class="top-row">
                <div class="d-flex justify-content-center">
                    <div class="d-flex align-items-center flex-column">
                        <span class="player-name-top">
                            Friend
                        </span>
                        <div class="choose-item-invis">
                            <div class="item">
                                <div id="partnerChoiceWait" class="spinner-border spinner-card" role="status" style="display:none">
                                </div>
                                <img id="partnerChoice" src="images/checkmark_icon.svg" style="" />
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <section style="text-align: center;">
                        <h1 id="round" class="round-text">Round 1</h1>
                    </section>
                    <section style="text-align: center;">
                        <h1 id="countdown" class="countdown">00:10</h1>
                    </section>
                </div>
                <div class="d-flex justify-content-center">
                    <div class="d-flex align-items-center flex-column">
                        <span class="player-name-top">
                            Enemy1
                        </span>
                        <div class="choose-item-invis">

                            <div class="item">
                                <div id="partnerEnemyChoiceWait" class="spinner-border spinner-card" role="status" style="display:none">
                                </div>
                                <img id="partnerEnemyChoice" src="images/checkmark_icon.svg" style="" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div></div>

            <div class="middle-row">
                <div class="star-container">
                    <img id="team_star_1" src="images/star_empty.svg" class="star" style="display:unset" />
                    <img id="team_star_2" src="images/star_empty.svg" class="star" style="display:unset" />

                </div>
                <div class="star-container">
                    <img id="enemy_star_1" src="images/star_empty.svg" class="star" style="display:unset" />
                    <img id="enemy_star_2" src="images/star_empty.svg" class="star" style="display:unset" />
                </div>
            </div>

            <div class="bottom-row">
                <div class="d-flex justify-content-center">
                    <div class="d-flex align-items-center flex-column">
                        <!-- choice selection -->
                        <div id="chooseItem" class="choose-item">
                            <img id="rockChoice" src="images/rock.svg" />
                            <img id="paperChoice" src="images/paper.svg" />
                            <img id="scissorsChoice" src="images/scissors.svg" />
                        </div>
                        <div id="selfChoiceDiv" class="choose-item-invis" style="display:none !important">
                            <div class="item">
                                <img id="selfChoice" src="images/rock.svg" />
                            </div>
                        </div>
                        <span class="player-name-bottom">
                            You!
                        </span>
                    </div>
                </div>
                <div></div>
                <div class="d-flex justify-content-center">
                    <div class="d-flex align-items-center flex-column">
                        <div class="choose-item-invis">

                            <div class="item">
                                <div id="selfEnemyChoiceWait" class="spinner-border spinner-card" role="status" style="display:none">
                                </div>
                                <img id="selfEnemyChoice" src="images/checkmark_icon.svg" />
                            </div>
                        </div>
                        <span class="player-name-bottom">
                            Enemy2
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- results -->
</main>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
<script>
    let quips = ["Scissors at the ready", "Avalanche incoming", "Paper uncovered"];
    let moveOptions = ["rock", "paper", "scissors"];

    // gamestate
    // player order: self, selfEnemy, partner, partnerEnemy
    let playerChoices = [0, 0, 0, 0];
    let playersAlive = [true, true, true, true];
    let roundSecondsRemaining = 0;
    let resultsSecondsRemaining = 0;
    let aiMode = false;
    let teamWins = 0;
    let enemyWins = 0;
    let starsToWin = 2;

    friendIdInput.addEventListener('input', function () {
        // restrict friend code input to alphanum
        this.value = this.value.replace(/[^a-zA-Z0-9-_]/g, '');

        // tether 'find game' button state to friend code input validity
        document.getElementById("findGameBtn").disabled = this.value.length > 0 && this.value.length < 8;
    });


    // create the SignalR connection
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/gamehub")
        .build();
    startConnection();

    function startConnection() {
        connection.start()
            .then(() => {
                console.log("SignalR connected");

                // display guid
                document.getElementById('GUID-TEXT').innerText = `${connection.connectionId.substring(0, 8)}`;
                document.getElementById('GUID-TEXT-2').innerText = `${connection.connectionId.substring(0, 8)}`;
            })
            .catch(err => console.error("Error while starting SignalR connection: " + err));
    }

    function startNextRound() {

        if (playersAlive[0]) {
            document.getElementById('chooseItem').style.setProperty('display', 'flex', 'important');
            document.getElementById('selfChoiceDiv').style.setProperty('display', 'none', 'important');
        }
        else {
            document.getElementById('selfChoice').src = "images/skull_icon.svg"
        }

        if (playersAlive[2]) {
            document.getElementById("partnerChoiceWait").style.setProperty('display', 'unset', 'important');
            document.getElementById("partnerChoice").style.setProperty('display', 'none', 'important');
        }
        else {
            document.getElementById('partnerChoice').src = "images/skull_icon.svg"
        }

        if (playersAlive[3]) {
            document.getElementById("partnerEnemyChoiceWait").style.setProperty('display', 'unset', 'important');
            document.getElementById("partnerEnemyChoice").style.setProperty('display', 'none', 'important');
        }
        else {
            document.getElementById('partnerEnemyChoice').src = "images/skull_icon.svg"
        }

        if (playersAlive[1]) {
            document.getElementById("selfEnemyChoiceWait").style.setProperty('display', 'unset', 'important');
            document.getElementById("selfEnemyChoice").style.setProperty('display', 'none', 'important');
        }
        else {
            document.getElementById('selfEnemyChoice').src = "images/skull_icon.svg"
        }


        // countdown
        roundSecondsRemaining = 10;

        // if aiMode and you are dead, don't make you wait
        if (!playersAlive[0] && aiMode) {
            roundSecondsRemaining = 2;
        }

        document.getElementById('countdown').textContent = "00:" + String(roundSecondsRemaining).padStart(2, '0');
        document.getElementById('countdown').style.color = roundSecondsRemaining > 5 ? "white" : roundSecondsRemaining > 3 ? "orange" : "red";
        countdownInterval = setInterval(() => {
            if (roundSecondsRemaining > 0) {
                --roundSecondsRemaining;
                document.getElementById('countdown').textContent = "00:" + String(roundSecondsRemaining).padStart(2, '0');
                document.getElementById('countdown').style.color = roundSecondsRemaining > 5 ? "white" : roundSecondsRemaining > 3 ? "orange" : "red";
            }
            // countdown finished, in aimode show next round, otherwise wait for server
            if (roundSecondsRemaining === 0) {
                if (aiMode) {
                    makeAiChoices();
                    revealChoices();
                }
            }
        }, 1000);

        if (aiMode) {
            // ready all 3 bots immediately
            // in future just move these to "movereceived";
            if (playersAlive[2]) {
                document.getElementById("partnerChoice").src = "images/checkmark_icon.svg";
                document.getElementById("partnerChoiceWait").style.setProperty('display', 'none', 'important');
                document.getElementById("partnerChoice").style.setProperty('display', 'flex', 'important');
            }

            if (playersAlive[3]) {
                document.getElementById("partnerEnemyChoice").src = "images/checkmark_icon.svg";
                document.getElementById("partnerEnemyChoiceWait").style.setProperty('display', 'none', 'important');
                document.getElementById("partnerEnemyChoice").style.setProperty('display', 'flex', 'important');
            }

            if (playersAlive[1]) {
                document.getElementById("selfEnemyChoice").src = "images/checkmark_icon.svg";
                document.getElementById("selfEnemyChoiceWait").style.setProperty('display', 'none', 'important');
                document.getElementById("selfEnemyChoice").style.setProperty('display', 'flex', 'important');
            }
        }
    }

    // res: -1 = loss, 0 = tie, 1 = win
    function GetRPSResult(a, b) {
        // rock
        if (a == 0)
            return b == 0 ? 0 : b == 1 ? -1 : 1;
        // paper
        if (a == 1)
            return b == 0 ? 1 : b == 1 ? 0 : -1;
        // scissors
        return b == 0 ? -1 : b == 1 ? 1 : 0;
    }

    function revealChoices() {
        // Clear countdown interval
        clearInterval(countdownInterval);
        countdownInterval = null;

        // Update countdown text
        document.getElementById('countdown').textContent = 'Results';
        document.getElementById('countdown').style.color = "white";

        // reveal player choices
        if (playersAlive[2])
            document.getElementById('partnerChoice').src = "images/" + moveOptions[playerChoices[2]] + ".svg"

        if (playersAlive[3])
            document.getElementById('partnerEnemyChoice').src = "images/" + moveOptions[playerChoices[3]] + ".svg"

        if (playersAlive[1])
            document.getElementById('selfEnemyChoice').src = "images/" + moveOptions[playerChoices[1]] + ".svg"

        if (playersAlive[0]) {
            document.getElementById('selfChoiceDiv').style.setProperty('display', 'flex', 'important');
            document.getElementById('selfChoice').src = "images/" + moveOptions[playerChoices[0]] + ".svg"
        }

        // hide choice selection
        document.getElementById('chooseItem').style.setProperty('display', 'none', 'important');

        // evaluate round
        // all players alive
        if (playersAlive[0] && playersAlive[1] && playersAlive[2] && playersAlive[3]) {
            let selfRes = GetRPSResult(playerChoices[0], playerChoices[1]);
            let selfEnemyRes = -selfRes;
            let partnerRes = GetRPSResult(playerChoices[2], playerChoices[3]);
            let partnerEnemyRes = -partnerRes;
            playersAlive[0] = selfRes >= 0;
            playersAlive[1] = selfEnemyRes >= 0;
            playersAlive[2] = partnerRes >= 0;
            playersAlive[3] = partnerEnemyRes >= 0;
        }
        // you dead
        else if (!playersAlive[0] && playersAlive[1] && playersAlive[2] && playersAlive[3]) {
            let partnerRes1 = GetRPSResult(playerChoices[2], playerChoices[1]);
            let selfEnemyRes = -partnerRes1;
            let partnerRes2 = GetRPSResult(playerChoices[2], playerChoices[3]);
            let partnerEnemyRes = -partnerRes2;
            playersAlive[1] = selfEnemyRes >= 0;
            playersAlive[2] = partnerRes2 >= 0 && partnerRes2 >= 0;
            playersAlive[3] = partnerEnemyRes >= 0;
        }
        // partner dead
        else if (playersAlive[0] && playersAlive[1] && !playersAlive[2] && playersAlive[3]) {
            let selfRes1 = GetRPSResult(playerChoices[0], playerChoices[1]);
            let selfEnemyRes = -selfRes1;
            let selfRes2 = GetRPSResult(playerChoices[0], playerChoices[3]);
            let partnerEnemyRes = -selfRes2;
            playersAlive[0] = selfRes1 >= 0 && selfRes2 >= 0;
            playersAlive[1] = selfEnemyRes >= 0;
            playersAlive[3] = partnerEnemyRes >= 0;
        }
        // your enemy dead
        else if (playersAlive[0] && !playersAlive[1] && playersAlive[2] && playersAlive[3]) {
            let selfRes = GetRPSResult(playerChoices[0], playerChoices[3]);
            let partnerEnemyRes1 = -selfRes;
            let partnerRes = GetRPSResult(playerChoices[2], playerChoices[3]);
            let partnerEnemyRes2 = -partnerRes;
            playersAlive[0] = selfRes >= 0;
            playersAlive[2] = partnerRes >= 0;
            playersAlive[3] = partnerEnemyRes1 >= 0 && partnerEnemyRes2 >= 0;
        }
        // partner enemy dead
        else if (playersAlive[0] && playersAlive[1] && playersAlive[2] && !playersAlive[3]) {
            let selfRes = GetRPSResult(playerChoices[0], playerChoices[1]);
            let selfEnemyRes1 = -selfRes;
            let partnerRes = GetRPSResult(playerChoices[2], playerChoices[1]);
            let selfEnemyRes2 = -partnerRes;
            playersAlive[0] = selfRes >= 0;
            playersAlive[1] = selfEnemyRes1 >= 0 && selfEnemyRes2 >= 0;
            playersAlive[2] = partnerRes >= 0;
        }

        // two dead
        else if (playersAlive[0] + playersAlive[1] + playersAlive[2] + playersAlive[3] == 2) {
            // there shouldn't be a case where two on the same team are alive as the round would be reset
            let teamAlive = playersAlive[0] ? 0 : 2;
            let enemyAlive = playersAlive[1] ? 1 : 3;
            let teamRes = GetRPSResult(playerChoices[teamAlive], playerChoices[enemyAlive]);
            let enemyRes = -teamRes;
            playersAlive[teamAlive] = teamRes >= 0;
            playersAlive[enemyAlive] = enemyRes >= 0;
        }

        if (!playersAlive[1] && !playersAlive[3]) {
            winRound();
        }

        if (!playersAlive[0] && !playersAlive[2]) {
            loseRound();
        }

        resultsSecondsRemaining = 3;
        let resultsInterval = setInterval(() => {
            if (--resultsSecondsRemaining == 0) {
                if (teamWins >= starsToWin) {
                    reset();
                    document.getElementById('resultsText').innerText = "You win!"
                    SetActiveScreen("results");
                }
                else if (enemyWins >= starsToWin) {
                    reset();
                    document.getElementById('resultsText').innerText = "You lose!"
                    SetActiveScreen("results");
                }
                else {
                    // start next round
                    if (aiMode)
                        startNextRound();
                }

                clearInterval(resultsInterval);
                resultsInterval = null;
            }
        }, 1000);
    }

    function reset() {
        document.getElementById('team_star_1').src = "images/star_empty.svg";
        document.getElementById('team_star_2').src = "images/star_empty.svg";
        document.getElementById('enemy_star_1').src = "images/star_empty.svg";
        document.getElementById('enemy_star_2').src = "images/star_empty.svg";
        enemyWins = 0;
        teamWins = 0;
        playersAlive = [true, true, true, true];
    }

    function winRound() {
        playersAlive = [true, true, true, true];
        teamWins++;
        if (teamWins > 0) {
            document.getElementById('team_star_1').src = "images/star_filled.svg";
        }
        if (teamWins > 1) {
            document.getElementById('team_star_2').src = "images/star_filled.svg";
        }
    }

    function loseRound() {
        playersAlive = [true, true, true, true];
        enemyWins++;
        if (enemyWins > 0) {
            document.getElementById('enemy_star_1').src = "images/star_filled.svg";
        }
        if (enemyWins > 1) {
            document.getElementById('enemy_star_2').src = "images/star_filled.svg";
        }
    }

    let countdownInterval = null;
    function SetActiveScreen(elemId) {
        document.getElementById("matchmaking").style.display = 'none';
        document.getElementById("searching").style.display = 'none';
        document.getElementById("game").style.display = 'none';
        document.getElementById("results").style.display = 'none';
        document.getElementById(elemId).style.display = 'unset';

        // perform necessary operations on screen change
        switch (elemId) {
            case "matchmaking":
                break;
            case "searching":
                document.getElementById("waitingQuip").innerText = quips[quips.length * Math.random() | 0] + "... Just waiting for your friend to join the fray!(1 / 4)";
                document.getElementById("searchingCodeButton").style.display = 
                    document.getElementById("searchingCodeLabel").style.display = document.getElementById("friendIdInput").value.length == 0 ? 'none' : 'visible';
                break;
            case "game":
                reset();
                startNextRound();
                break;
        }
    }

    function makeAiChoices() {
        for (let i = 1; i < 4; ++i)
            playerChoices[i] = moveOptions.length * Math.random() | 0;
    }

    function makeChoice(moveInd) {
        if (countdownInterval) {
            playerChoices[0] = moveInd;
            if (playersAlive[0]) {
                document.getElementById('chooseItem').style.setProperty('display', 'none', 'important');
                document.getElementById('selfChoiceDiv').style.setProperty('display', 'flex', 'important');
                document.getElementById('selfChoice').src = "images/checkmark_icon.svg"
            }
            if (aiMode) {
                makeAiChoices();
                revealChoices();
            }
            else {
                connection.invoke("SubmitMove", "" + moveInd)
                    .catch(err => console.error("Error submitting action: " + err));
            }
        }
    }

    document.getElementById("GUID").addEventListener("click", function () {
        navigator.clipboard.writeText(document.getElementById("GUID-TEXT").innerText);
    });

    document.getElementById("GUID-2").addEventListener("click", function () {
        navigator.clipboard.writeText(document.getElementById("GUID-TEXT-2").innerText);
    });

    document.getElementById("rockChoice").addEventListener("click", function () {
        makeChoice(0);
    });

    document.getElementById("paperChoice").addEventListener("click", function () {
        makeChoice(1);
    });

    document.getElementById("scissorsChoice").addEventListener("click", function () {
        makeChoice(2);
    });

    document.getElementById("fightAIBtn").addEventListener("click", function () {
        aiMode = true;
        SetActiveScreen("game");
    });

    document.getElementById("playAgainBtn").addEventListener("click", function () {
        SetActiveScreen("matchmaking");
    });

    document.getElementById("findGameBtn").addEventListener("click", function () {
        aiMode = false;

        // start matchmaking
        SetActiveScreen("searching");
        connection.invoke("StartMatchmaking", document.getElementById("friendIdInput").value)
            .catch(err => console.error("Error starting matchmaking: " + err));
    });

    // listen for moves
    connection.on("ReceiveMoves", function (playerMoves) {
        for (let i = 0; i < playerMoves.length; ++i)
            playerChoices[i] = playerMoves[i];
        revealChoices();
    });

    // start next round
    connection.on("StartRound", function () {
        startNextRound();
    });

    connection.on("PlayerMoved", function (playerIndex) {
        // reveal player choices
        if (playerIndex == 2)
            document.getElementById('partnerChoice').src = "images/checkmark_icon.svg"

        if (playerIndex == 3)
            document.getElementById('partnerEnemyChoice').src = "images/checkmark_icon.svg"

        if (playerIndex == 1)
            document.getElementById('selfEnemyChoice').src = "images/checkmark_icon.svg"
    });

    // listen for moves
    connection.on("log", function (playerMoves) {
        console.log(playerMoves);
    });

    connection.on("JoinRoom", function (team1Player1, team1Player2, team2Player1, team2Player2) {
        // display room info
        // alert(`Team 1: ${team1Player1}, ${team1Player2}`);
        // alert(`Team 2: ${team2Player1}, ${team2Player2}`);
        SetActiveScreen("game");
    });
</script>
